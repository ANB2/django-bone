#!/bin/bash
#
# Generates Django Project Skeletons Simply and Properly
# Justine Tunney <jtunney@lobstertech.com>
# Licensed MIT
#

PROJ=$1

[ -z "$PROJ" ]               && ( echo "missing name!" >&2; exit 1 )
[ -f "$PROJ" ]               && ( echo "$PROJ already exists!" >&2; exit 1 )
[ -z "$DEST" ]               && DEST="."
[ -z "$EMAIL" ]              && EMAIL="$(git config user.email)"
[ -z "$EMAIL" ]              && EMAIL="$USER@$(hostname -f)"
[ -z "$AUTHOR" ]             && AUTHOR="$(git config user.name)"
[ -z "$AUTHOR" ]             && AUTHOR="$USER"
[ -z "$DESCRIP" ]            && DESCRIP="$PROJ"
[ -z "$LICENSE" ]            && LICENSE="GNU AGPL v3 or later"
[ -z "$PIP_DOWNLOAD_CACHE" ] && export PIP_DOWNLOAD_CACHE="~/.pip/cache"

virtualenv $PROJ
cd $PROJ
source bin/activate
mkdir $PROJ
cd $PROJ

mkdir -p scripts
mkdir -p conf/{init.d,nginx}
mkdir -p doc/{_build,_static,_templates}
mkdir -p $PROJ/templates/$PROJ
mkdir -p $PROJ/media/{img,css,js}
mkdir -p $PROJ/media/$PROJ/{img,css,js}
mkdir -p $PROJ/management/commands

echo "downloading ez_setup.py..."
wget -qO ez_setup.py http://peak.telecommunity.com/dist/ez_setup.py || exit 1
echo "downloading $PROJ/media/$PROJ/img/favicon.png..."
wget -qO $PROJ/media/$PROJ/img/favicon.png https://we.riseup.net/favicon.png || exit 1
echo "downloading $PROJ/media/js/jquery.js..."
wget -qO $PROJ/media/js/jquery.js http://code.jquery.com/jquery.js || exit 1
echo "downloading $PROJ/media/js/jquery.min.js..."
wget -qO $PROJ/media/js/jquery.min.js http://code.jquery.com/jquery.min.js || exit 1
echo "downloading $PROJ/media/js/modernizr.js..."
wget -qO $PROJ/media/js/modernizr.js http://lobstertech.com/media/js/modernizr.js || exit 1
echo "downloading $PROJ/media/js/modernizr.min.js..."
wget -qO $PROJ/media/js/modernizr.min.js http://lobstertech.com/media/js/modernizr.min.js || exit 1

echo "generating .gitignore..."
cat >.gitignore <<EOF
settings_local.py
$PROJ/media/$PROJ/js/*.min.js
$PROJ/media/$PROJ/css/*.min.css
core
*.pyc
*.pyo
*.pyc
*.o
*.bak
*.db
*~
*.rej
*.orig
.figleaf*
*.egg-info
*.egg
._*
.DS_Store
Thumbs.db*
docs/_build
.figleaf*
*.egg-info
*.egg
build
deps
dist
pip-log.txt
EOF

echo "generating setup.py..."
cat >setup.py <<EOF
# http://packages.python.org/distribute/setuptools.html
# http://diveintopython3.org/packaging.html
# http://wiki.python.org/moin/CheeseShopTutorial
# http://pypi.python.org/pypi?:action=list_classifiers

from ez_setup import use_setuptools
use_setuptools(version="0.6c11")

import os
from setuptools import setup, find_packages

def read(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()

version = __import__("$PROJ").__version__

setup(
    name                 = "$PROJ",
    version              = version,
    description          = "$DESCRIP",
    long_description     = read("README.rst"),
    author               = "$AUTHOR",
    author_email         = "$EMAIL",
    license              = "$LICENSE",
    install_requires     = ["Django", "south", "python-memcached", "cssmin",
                            "slimit", "django-debug-toolbar"],
    packages             = find_packages(),
    include_package_data = True,
    zip_safe             = False,
    scripts              = ["scripts/" + f for f in os.listdir("scripts")
                            if not f.startswith(".")],
)
EOF

echo "generating README.rst..."
cat >README.rst <<EOF
.. -*-rst-*-

=$(echo $PROJ | sed s/./=/g)=
 $PROJ
=$(echo $PROJ | sed s/./=/g)=

:name:        $PROJ
:description: $DESCRIP
:copyright:   Â© $(date +%Y) $AUTHOR
:license:     $LICENSE


Installation
============

System-wide install::

    sudo python setup.py install
    $PROJ syncdb
    $PROJ minify $PROJ
    $PROJ test
    $PROJ runserver

Virtualenv git install::

    virtualenv $PROJ
    cd $PROJ/$PROJ
    source bin/activate
    git clone REPO_URL
    easy_install pip
    pip install -e \$(pwd)
    $PROJ-dev syncdb
    $PROJ-dev test
    $PROJ-dev runserver

Documentation::

    pip install sphinx
    make -C doc html
    firefox doc/_build/html/index.html

EOF

echo "generating scripts/$PROJ..."
cat >scripts/$PROJ <<EOF
#!/usr/bin/env python
import os
# ignore when django autoreloader restarts program
if os.environ.get("RUN_MAIN") != "true":
    if not os.environ.get("DJANGO_SETTINGS_MODULE"):
        os.environ["DJANGO_SETTINGS_MODULE"] = "$PROJ.settings"
from django.core.management import execute_from_command_line
from django.conf import settings
execute_from_command_line()
EOF

echo "generating scripts/$PROJ-dev..."
cat >scripts/$PROJ-dev <<EOF
#!/usr/bin/env python
import os
import sys
# ignore when django autoreloader restarts program
if os.environ.get("RUN_MAIN") != "true":
    if os.environ.get("DJANGO_SETTINGS_MODULE"):
        print >>sys.stderr, ("Overriding DJANGO_SETTINGS_MODULE not permitted "
                             "in development mode.  Use $PROJ command "
                             "instead.")
        sys.exit(1)
    else:
        os.environ["DJANGO_SETTINGS_MODULE"] = "$PROJ.settings_dev"
from django.core.management import execute_from_command_line
from django.conf import settings
execute_from_command_line()
EOF

echo "generating $PROJ/__init__.py..."
cat >$PROJ/__init__.py <<EOF
__version__ = "0.1"
EOF

echo "generating $PROJ/settings.py..."
cat >$PROJ/settings.py <<EOF
r"""

    $PROJ.settings
    $(echo $PROJ.settings | sed s/./~/g)

    This file is used to configure Django.

"""

import os
import sys
from datetime import timedelta
from os.path import abspath, dirname, join, exists
project_root = dirname(abspath(__file__))

DEBUG = False
TEMPLATE_DEBUG = DEBUG
SECRET_KEY = "please change me to some wacky random value"
MEDIA_ROOT = join(project_root, "media")
MEDIA_URL = "/media/"
STATIC_URL = "/media/"
SITE_ID = 1
USE_I18N = True
USE_L10N = False
DEFAULT_CHARSET = "utf-8"
ROOT_URLCONF = "$PROJ.urls"
LOGIN_URL = "/login/"
LOGOUT_URL = "/logout/"
LOGIN_REDIRECT_URL = "/"
ADMIN_MEDIA_PREFIX = "/media/admin/"
USE_X_FORWARDED_HOST = True
BOLD = "\x1b[1m"
GREEN = "\x1b[32m"
RESET = "\x1b[0m"

ADMINS = (
    ("", "$EMAIL"),
)

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "$PROJ.sqlite3",
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.MemcachedCache",
        "KEY_PREFIX": project_root,
        "LOCATION": [
            "127.0.0.1:11211",
        ],
    },
}

TEMPLATE_LOADERS = (
    ("django.template.loaders.cached.Loader", (
        "django.template.loaders.filesystem.Loader",
        "django.template.loaders.app_directories.Loader",
    )),
)

MIDDLEWARE_CLASSES = [
    "$PROJ.middleware.XForwardedForMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.transaction.TransactionMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "$PROJ.middleware.CsrfCookieWhenLoggedIn",
    "$PROJ.middleware.NeverCache",
]

TEMPLATE_CONTEXT_PROCESSORS = [
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.core.context_processors.debug",
    "django.contrib.messages.context_processors.messages",
]

INSTALLED_APPS = [
    "$PROJ",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.admin",
    "south",
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": (GREEN + "%(asctime)s %(levelname)s %(name)s "
                       "%(filename)s:%(lineno)d " + RESET + "%(message)s"),
        },
        "simple": {
            "format": GREEN + "%(levelname)s " + RESET + "%(message)s",
        },
    },
    "handlers": {
        "null": {
            "level": "DEBUG",
            "class": "django.utils.log.NullHandler",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "django": {
            "level": "WARNING",
            "handlers": ["console"],
            "propagate": True,
        },
        "django.request": {
            "level": "WARNING",
            "handlers": ["console", "mail_admins"],
            "propagate": False,
        },
        "$PROJ": {
            "level": "WARNING",
            "handlers": ["console", "mail_admins"],
            "propagate": False,
        },
    },
}

try:
    from $PROJ.settings_local import *
except ImportError:
    pass
EOF

echo "generating $PROJ/settings_dev.py..."
cat >$PROJ/settings_dev.py <<EOF

import sys
from $PROJ.settings import *

DEBUG = True
TEMPLATE_DEBUG = DEBUG

TEMPLATE_LOADERS = [
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
]

INTERNAL_IPS = [
    "127.0.0.1",
]

MIDDLEWARE_CLASSES += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
INSTALLED_APPS += ["debug_toolbar"]

LOGGING["loggers"]["django"]["level"] = "DEBUG"
LOGGING["loggers"]["django.request"]["level"] = "DEBUG"
LOGGING["loggers"]["$PROJ"]["level"] = "DEBUG"
LOGGING["handlers"]["console"]["formatter"] = "verbose"
LOGGING["handlers"]["mail_admins"] = {"level": "DEBUG",
                                      "class": "django.utils.log.NullHandler"}

try:
    from $PROJ.settings_dev_local import *
except ImportError:
    pass
EOF

echo "generating $PROJ/settings_local.py..."
cat >$PROJ/settings_local.py <<EOF
# i"m ignored by git so you can specify your secret settings :)
SECRET_KEY = "$(head -c 51 /dev/urandom | base64)"
EOF

echo "generating $PROJ/middleware.py..."
cat >$PROJ/middleware.py <<EOF
r"""

    $PROJ.middleware
    $(echo $PROJ.middleware | sed s/./~/g)

    Django middleware definitions.

"""

from django.utils.cache import add_never_cache_headers


class NeverCache(object):
    def process_response(self, request, response):
        add_never_cache_headers(response)
        return response


class XForwardedForMiddleware(object):
    """Replace \`\`REMOTE_ADDR\`\` with \`\`HTTP_X_FORWARDED_FOR\`\`

    When reverse proxying from nginx, we receive a tcp connection from
    localhost which isn"t the client"s real ip address.  Normally
    reverse proxies are configured to set the \`\`X-Forwarded-For\`\`
    header which gives us the actual client ip.
    """

    def process_request(self, request):
        if "HTTP_X_FORWARDED_FOR" in request.META:
            ip = request.META["HTTP_X_FORWARDED_FOR"]
            # trim that goofy prefix when nginx uses hybrid ip4/ip6 sockets
            if ip.startswith('::ffff:'):
                ip = ip[len('::ffff:'):]
            request.META["REMOTE_ADDR"] = ip
            request.META["REMOTE_HOST"] = None


class CsrfCookieWhenLoggedIn(object):
    """Tell Django to set CSRF cookie on all pages when logged in

    Normally Django only sets the CSRF cookie when you use the CSRF
    protection template tag.  Because we use Ajax for just about
    everything, we need to ensure this cookie is always set once the
    user logs in.
    """

    def process_response(self, request, response):
        if response.status_code == 200 and request.method == "GET":
            if request.user.is_authenticated():
                request.META["CSRF_COOKIE_USED"] = True
        return response
EOF

echo "generating $PROJ/tests.py..."
cat >$PROJ/tests.py <<EOF

from django.test import TestCase
from django.core.urlresolvers import reverse


class BasicTest(TestCase):
    fixtures = []

    def setUp(self):
        pass

    def test_index(self):
        url = reverse("$PROJ.views.index")
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

    def test_notfound(self):
        response = self.client.get("/euhcuehsrcoahucr/")
        self.assertEqual(response.status_code, 404)

    def test_error(self):
        url = reverse("$PROJ.views.error")
        self.assertRaises(AssertionError, lambda: self.client.get(url))
EOF

echo "generating $PROJ/admin.py..."
cat >$PROJ/admin.py <<EOF
r"""

    $PROJ.admin
    $(echo $PROJ.admin | sed s/./~/g)

    Django admin gui customization

"""

from django.contrib import admin
from django.contrib.auth.models import User, Group
from django.contrib.auth.admin import UserAdmin, GroupAdmin

from $PROJ import models as db


class AdminSite(admin.AdminSite):
    """Overriden Django AdminSite Object
    """

    def __init__(self, *args, **kwargs):
        admin.AdminSite.__init__(self, *args, **kwargs)
        self.register(User, UserAdmin)
        self.register(Group, GroupAdmin)


site = AdminSite(name="${PROJ}admin")
EOF

echo "generating $PROJ/urls.py..."
cat >$PROJ/urls.py <<EOF
r"""

    $PROJ.urls
    $(echo $PROJ.urls | sed s/./~/g)

    HTTP request routing

"""

from django.conf import settings
from django.conf.urls.defaults import patterns, url, include
from django.views.decorators.http import require_GET, require_POST

from $PROJ import admin

urlpatterns = patterns("",
    url(r"^$", "$PROJ.views.index", name="index"),
    url(r"^error/$", "$PROJ.views.error", name="error"),
    url(r"^admin/", include(admin.site.urls)),
)

if settings.DEBUG:
    urlpatterns += patterns("",
        url(r"^media/(?P<path>.*)$", "django.views.static.serve",
            {"document_root": settings.MEDIA_ROOT}),
    )
EOF

echo "generating $PROJ/views.py..."
cat >$PROJ/views.py <<EOF
r"""

    $PROJ.views
    $(echo $PROJ.views | sed s/./~/g)

    Dynamic web page functions

"""

from django.conf import settings
from django.template import RequestContext
from django.shortcuts import render_to_response

from $PROJ import models as db


def index(request):
    """I render the home page
    """
    return render_to_response(
        "$PROJ/index.html", {},
        context_instance=RequestContext(request))


def error(request):
    """A view that's designed to fail
    """
    assert False
EOF

echo "generating $PROJ/models.py..."
cat >$PROJ/models.py <<EOF
r"""

    $PROJ.models
    $(echo $PROJ.models | sed s/./~/g)

    Database definition

"""

from django.db import models
EOF

echo "generating $PROJ/templates/404.html"
cat >$PROJ/templates/404.html <<EOF
{% extends "$PROJ/base.html" %}
{% block body %}
  <h1>four oh four: brian not found</h1>
{% endblock body %}
EOF

echo "generating $PROJ/templates/500.html"
cat >$PROJ/templates/500.html <<EOF
<h1>500: Internal Server Catastrophe</h1>
EOF

echo "generating $PROJ/templates/$PROJ/base.html"
cat >$PROJ/templates/$PROJ/base.html <<EOF
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>{% block title %}$PROJ{% endblock title %}</title>
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <link rel="shortcut icon" href="{{ MEDIA_URL }}$PROJ/img/favicon.png" />
  <meta name="description" content="{% block description %}$PROJ{% endblock description %}" />
  <link rel="canonical" href="{% block canonical %}{{ request.path }}{% endblock canonical %}" />
  <link rel="stylesheet" href="{{ MEDIA_URL }}$PROJ/css/$PROJ.css?v=2" type="text/css" media="all" />
  <script src="{{ MEDIA_URL }}$PROJ/js/modernizr{% if not debug %}.min{% endif %}.js" type="text/javascript"></script>
  {% block extra_head %}
  {% endblock extra_head %}
</head>
<body class="{% block body_class %}{% endblock %}">
  {% block body %}
    <div id="header-container">
      {% block header %}
        <header class="wrapper clearfix">
          <h1 id="title">h1#$PROJ</h1>
          <nav>
            <ul>
              <li><a href="#">nav ul li a</a></li>
              <li><a href="#">nav ul li a</a></li>
              <li><a href="#">nav ul li a</a></li>
            </ul>
          </nav>
        </header>
      {% endblock header %}
    </div>
    <div id="main-container">
      {% block content %}
      {% endblock content %}
    </div>
    <div id="footer-container">
      {% block footer %}
        <footer class="wrapper">
          <h3>footer</h3>
        </footer>
      {% endblock footer %}
    </div>
  {% endblock body %}
  {% block scripts %}
    <script src="{{ MEDIA_URL }}$PROJ/js/jquery{% if not debug %}.min{% endif %}.js" type="text/javascript"></script>
    <script src="{{ MEDIA_URL }}$PROJ/js/$PROJ{% if not debug %}.min{% endif %}.js?v=1" type="text/javascript"></script>
  {% endblock scripts %}
  <script type="text/javascript">
    \$(function() {
      {% block js_init %}
      {% endblock js_init %}
    });
  </script>
</body>
</html>
EOF

echo "generating $PROJ/templates/$PROJ/index.html"
cat >$PROJ/templates/$PROJ/index.html <<EOF
{% extends "$PROJ/base.html" %}
{% block body_class %}index{% endblock body_class %}
{% block content %}
  <div id="main" class="wrapper clearfix">
    <article>
      <header>
        <h1>article header h1</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec.</p>
      </header>
      <section>
        <h2>article section h2</h2>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor. Etiam ullamcorper lorem dapibus velit suscipit ultrices. Proin in est sed erat facilisis pharetra.</p>
      </section>
      <section>
        <h2>article section h2</h2>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor. Etiam ullamcorper lorem dapibus velit suscipit ultrices. Proin in est sed erat facilisis pharetra.</p>
      </section>
      <footer>
        <h3>article footer h3</h3>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor.</p>
      </footer>
    </article>
    <aside>
      <h3>aside</h3>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor. Etiam ullamcorper lorem dapibus velit suscipit ultrices.</p>
    </aside>
  </div>
{% endblock content %}
EOF

echo "generating $PROJ/media/$PROJ/css/$PROJ.css..."
cat >$PROJ/media/$PROJ/css/$PROJ.css <<EOF
/* HTML5 â° Boilerplate
 * ==|== normalize ==========================================================
 */

article, aside, details, figcaption, figure, footer, header, hgroup, nav, section { display: block; }
audio, canvas, video { display: inline-block; *display: inline; *zoom: 1; }
audio:not([controls]) { display: none; }
[hidden] { display: none; }

html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }
body { margin: 0; font-size: 13px; line-height: 1.231; }
body, button, input, select, textarea { font-family: sans-serif; color: #222; }

::-moz-selection { background: #fe57a1; color: #fff; text-shadow: none; }
::selection { background: #fe57a1; color: #fff; text-shadow: none; }

a { color: #00e; }
a:visited { color: #551a8b; }
a:hover { color: #06e; }
a:focus { outline: thin dotted; }
a:hover, a:active { outline: 0; }

abbr[title] { border-bottom: 1px dotted; }
b, strong { font-weight: bold; }
blockquote { margin: 1em 40px; }
dfn { font-style: italic; }
hr { display: block; height: 1px; border: 0; border-top: 1px solid #ccc; margin: 1em 0; padding: 0; }
ins { background: #ff9; color: #000; text-decoration: none; }
mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; }
pre, code, kbd, samp { font-family: monospace, monospace; _font-family: 'courier new', monospace; font-size: 1em; }
pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; }
q { quotes: none; }
q:before, q:after { content: ""; content: none; }
small { font-size: 85%; }
sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }
sup { top: -0.5em; }
sub { bottom: -0.25em; }
ul, ol { margin: 1em 0; padding: 0 0 0 40px; }
dd { margin: 0 0 0 40px; }
nav ul, nav ol { list-style: none; list-style-image: none; margin: 0; padding: 0; }
img { border: 0; -ms-interpolation-mode: bicubic; vertical-align: middle; }
svg:not(:root) { overflow: hidden; }
figure { margin: 0; }

form { margin: 0; }
fieldset { border: 0; margin: 0; padding: 0; }
label { cursor: pointer; }
legend { border: 0; *margin-left: -7px; padding: 0; }
button, input, select, textarea { font-size: 100%; margin: 0; vertical-align: baseline; *vertical-align: middle; }
button, input { line-height: normal; *overflow: visible; }
table button, table input { *overflow: auto; }
button, input[type="button"], input[type="reset"], input[type="submit"] { cursor: pointer; -webkit-appearance: button; }
input[type="checkbox"], input[type="radio"] { box-sizing: border-box; }
input[type="search"] { -webkit-appearance: textfield; -moz-box-sizing: content-box; -webkit-box-sizing: content-box; box-sizing: content-box; }
input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }
button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }
textarea { overflow: auto; vertical-align: top; resize: vertical; }
input:valid, textarea:valid {  }
input:invalid, textarea:invalid { background-color: #f0dddd; }

table { border-collapse: collapse; border-spacing: 0; }
td { vertical-align: top; }


/* ===================================================
    Initializr styles
    http://verekia.com/initializr/responsive-template
    Author: Jonathan Verrecchia
   =================================================== */

body{ font:16px/24px Helvetica, Helvetica Neue, Arial, sans-serif; }

.wrapper{
	width:90%;
	margin:0 5%;
}

/* ===================
    ALL: Orange Theme
   =================== */

#header-container{ border-bottom: 20px solid #e44d26; }
#footer-container{ border-top:    20px solid #e44d26; }
#main aside      { border-top:    20px solid #e44d26; }

#header-container,
#footer-container,
#main aside{
	background:#f16529;
}

#title{ color:white; }

::-moz-selection { background: #f16529; color: #fff; text-shadow: none; }
::selection      { background: #f16529; color: #fff; text-shadow: none; }

/* ==============
    MOBILE: Menu
   ============== */

nav a{
	display:block;
	margin-bottom:10px;
	padding:15px 0;

	background:#e44d26;
	color:white;

	text-align:center;
	text-decoration:none;
	font-weight:bold;
}

nav a:hover, nav a:visited{
	color:white;
}

nav a:hover{
	text-decoration:underline;
}

/* ==============
    MOBILE: Main
   ============== */

#main{
	padding:30px 0;
}

#main article h1{
	font-size:2em;
}

#main aside{
	color:white;
	padding:0px 5% 10px;
}

#footer-container footer{
	color:white;
	padding:20px 0;
}

/* ===============
    ALL: IE Fixes
   =============== */

.ie7 #title{ padding-top:20px; }


/* ==|== non-semantic helper classes ======================================== */
.ir { display: block; border: 0; text-indent: -999em; overflow: hidden; background-color: transparent; background-repeat: no-repeat; text-align: left; direction: ltr; }
.ir br { display: none; }
.hidden { display: none !important; visibility: hidden; }
.visuallyhidden { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; }
.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; }
.invisible { visibility: hidden; }
.clearfix:before, .clearfix:after { content: ""; display: table; }
.clearfix:after { clear: both; }
.clearfix { zoom: 1; }


/* ==|== media queries ====================================================== */

@media only screen and (min-width: 480px) {

/* ====================
    INTERMEDIATE: Menu
   ==================== */
	
	nav a{
		float:left;
		width:27%;
		margin:0 1.7%;
		padding:25px 2%;
		margin-bottom:0;
	}
	
	nav li:first-child a{ margin-left:0;  }
	nav li:last-child  a{ margin-right:0; }
	
/* ========================
    INTERMEDIATE: IE Fixes
   ======================== */

	nav ul li{
		display:inline;
	}	
	.oldie nav a{
		margin:0 0.7%;		
	}
}

@media only screen and (min-width: 768px) {

/* ====================
    WIDE: CSS3 Effects
   ==================== */

	#header-container,
	#main aside{
		-webkit-box-shadow:0 5px 10px #aaa;
		   -moz-box-shadow:0 5px 10px #aaa;
		        box-shadow:0 5px 10px #aaa;
	}

/* ============
    WIDE: Menu
   ============ */
	
	#title{
		float:left;
	}

	nav{
		float:right;
		width:38%;
	}

/* ============
    WIDE: Main
   ============ */

	#main article{
		float:left;
		width:57%;
	}
		
	#main aside{
		float:right;
		width:28%;
	}
}

@media only screen and (min-width: 1140px) {

/* ===============
    Maximal Width
   =============== */

	.wrapper{
		width:1026px; /* 1140px - 10% for margins */
		margin:0 auto;
	}
}

/* ==|== print styles ======================================================= */
 
@media print {
  * { background: transparent !important; color: black !important; text-shadow: none !important; filter:none !important; -ms-filter: none !important; } 
  a, a:visited { text-decoration: underline; }
  a[href]:after { content: " (" attr(href) ")"; }
  abbr[title]:after { content: " (" attr(title) ")"; }
  .ir a:after, a[href^="javascript:"]:after, a[href^="#"]:after { content: ""; } 
  pre, blockquote { border: 1px solid #999; page-break-inside: avoid; }
  thead { display: table-header-group; }
  tr, img { page-break-inside: avoid; }
  img { max-width: 100% !important; }
  @page { margin: 0.5cm; }
  p, h2, h3 { orphans: 3; widows: 3; }
  h2, h3 { page-break-after: avoid; }
}
EOF

echo "generating conf/nginx/$PROJ.dev.conf..."
cat >conf/nginx/$PROJ.dev.conf <<EOF
# -*-conf-*-

upstream $PROJ {
  server 127.0.0.1:7000;
}

server {
  listen [::]:80 default;
  server_name $PROJ.com www.$PROJ.com;
  server_name_in_redirect on;
  access_log off;

  location ~ /\. { deny all; }
  location = /favicon.ico { access_log off; return 404; }
  location = /robots.txt  { access_log off; return 404; }
  location = /sitemap.xml { access_log off; return 404; }

  # if (\$host !~* ^$PROJ\.com\$) {
  #   rewrite ^(.*)\$ http://$PROJ.org\$1 redirect;
  # }

  location /media/ {
    root $(pwd)/$PROJ;
    # expires 1y;
    # add_header Cache-Control public;
    # autoindex on;
    # autoindex_localtime on;
  }

  location / {
    proxy_redirect off;
    proxy_pass http://$PROJ;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Host \$PROJ.com;
    proxy_connect_timeout 5000ms;
  }
}
EOF

echo "generating conf/init.d/$PROJ..."
cat >conf/init.d/$PROJ <<EOF
#! /bin/sh
### BEGIN INIT INFO
# Provides:		$PROJ
# Required-Start:	\$local_fs \$remote_fs \$network \$syslog
# Required-Stop:	\$local_fs \$remote_fs \$network \$syslog
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Start $PROJ gunicorn daemon
# Description:		Start $PROJ gunicorn daemon
### END INIT INFO

# Edit /etc/default/$PROJ to change these.
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=$PROJ
DESC=$PROJ
DAEMON=$(pwd)/../bin/gunicorn_django
PIDFILE=$(pwd)/../$PROJ.pid
SETTINGS=$(pwd)/$PROJ/settings.py
RUNAS=artists
WORKERS=5
BIND=127.0.0.1:7000
test -r /etc/default/$PROJ && . /etc/default/$PROJ

ARGS="--daemon --bind=\$BIND --workers=\$WORKERS --max-requests=1000 --pid=\$PIDFILE \$SETTINGS"

set -e

. /lib/lsb/init-functions

case "\$1" in
  start)
	echo -n "Starting \$DESC: "
	start-stop-daemon --start --pidfile \$PIDFILE --exec \$DAEMON --chuid \$RUNAS -- \$ARGS
	echo "\$NAME."
	;;

  stop)
	echo -n "Stopping \$DESC: "
	start-stop-daemon --stop --pidfile \$PIDFILE
	echo "\$NAME."
	rm -f \$PIDFILE
	;;

  restart|force-reload)
	echo -n "Restarting \$DESC: "
	start-stop-daemon --stop --pidfile \$PIDFILE
	rm -f \$PIDFILE
	sleep 1
	start-stop-daemon --start --pidfile \$PIDFILE --exec \$DAEMON --chuid \$RUNAS -- \$ARGS
	echo "\$NAME."
	;;

  reload)
        echo -n "Reloading \$DESC: "
        start-stop-daemon --stop --signal HUP --pidfile \$PIDFILE
        echo "\$NAME."
        ;;

  status)
	status_of_proc \$DAEMON \$NAME
	;;
  *)
	N=/etc/init.d/\$NAME
	echo "Usage: \$N {start|stop|reload|restart|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0
EOF

echo "generating $PROJ/management/__init__.py..."
touch $PROJ/management/__init__.py

echo "generating $PROJ/management/commands/__init__.py..."
touch $PROJ/management/commands/__init__.py

echo "generating $PROJ/management/commands/minify.py..."
cat >$PROJ/management/commands/minify.py <<EOF
r"""

    $PROJ.management.commands.minify
    $(echo $PROJ.management.commands.minify | sed s/./~/g)

    Minifies JS/CSS/PNG media files.

    Usage: ``$PROJ minify APP ...``

    You specify a list of Django apps as arguments.  This program finds the
    files by searching ``\$MEDIA_DIR/\$APP_NAME/{js,css,img}/``.  The
    ``.min.js`` file extension is used for minified files.  No new files need
    to be created to optimize PNG.

    Minification is done using:

    - Javascript: slimit_
    - CSS: cssmin_
    - PNG: optipng_ (if available)

    Please don't put third party libraries like jQuery in your app's media
    folder because we shouldn't be minimizing them.  Put vendor libraries in
    ``\$MEDIA_DIR/{js,css,img}/``.

    .. _slimit: http://pypi.python.org/pypi/slimit
    .. _cssmin: http://pypi.python.org/pypi/cssmin
    .. _optipng: http://optipng.sourceforge.net/

"""

import os
import sys
from glob import glob
from subprocess import call
from optparse import make_option


from django.conf import settings
from django.core.management.base import BaseCommand, CommandError


class Command(BaseCommand):
    args = 'APP ...'
    help = __doc__
    option_list = BaseCommand.option_list + (
        make_option(
            '--no-mangle', action='store_false', dest='mangle',
            default=True, help="Don't mangle javascript variables"),
        make_option(
            '--copyright', action='store_true', dest='copyright',
            default=False, help=("Preserve first comment in file about "
                                 "imaginary property")),
    )

    def handle(self, *args, **options):
        mroot = settings.MEDIA_ROOT
        mangle = options['mangle']
        copyright = options['copyright']
        toto_before = 0
        toto_after = 0

        if not args:
            raise CommandError('Please specify an app name!')

        try:
            from slimit import minify
        except ImportError:
            raise CommandError('Please run: pip install slimit')

        try:
            from cssmin import cssmin
        except ImportError:
            raise CommandError('Please run: pip install cssmin')

        for app in args:
            for ext, funk in (('js', lambda s: minify(s, mangle=mangle)),
                              ('css', lambda s: cssmin(s))):
                noms = glob('%s/%s/%s/*.%s' % (mroot, app, ext, ext))
                for nom in [nom for nom in noms if '.min.' not in nom]:
                    before = os.stat(nom).st_size
                    toto_before += before
                    sys.stdout.write('minifying %s...' % (nom))
                    try:
                        with open(nom) as fin:
                            data = fin.read()
                            res = funk(data)
                            if copyright and data.startswith('/*'):
                                res = data[:data.index('*/') + 2] + res
                    except Exception, exc:
                        sys.stdout.write('%r\n' % (exc))
                    else:
                        after = len(res)
                        toto_after += after
                        with open(nom[:-len(ext)] + 'min.' + ext, 'w') as fout:
                            fout.write(res)
                        pct = int(float(after) / before * 100)
                        sys.stdout.write('OK (%d%% orig size)\n' % (pct))

        sys.stdout.write(
            'total js/css reduction: %dkB -> %dkB (%d%% orig size)\n' % (
                int(float(toto_before) / 1024),
                int(float(toto_after) / 1024),
                int(float(toto_after) / toto_before * 100)))

        pngs = []
        for app in args:
            pngs += glob('%s/%s/img/*.png' % (mroot, app))
            pngs += glob('%s/%s/img/*/*.png' % (mroot, app))
            pngs += glob('%s/%s/img/*/*/*.png' % (mroot, app))
        if pngs:
            sys.stdout.write('optimizing all your png files...')
            try:
                if call(['optipng', '-quiet'] + pngs) != 0:
                    sys.stdout.write('FAIL\n')
            except Exception, exc:
                if isinstance(exc, OSError) and exc.errno == 2:
                    sys.stdout.write('optipng not installed!\n'
                                     'sudo apt-get install optipng\n')
                else:
                    sys.stdout.write('%r\n' % (exc))
            else:
                sys.stdout.write('OK\n')
EOF

echo "generating doc/conf.py..."
cat >doc/conf.py <<EOF
# -*- coding: utf-8 -*-

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

if not os.environ.get("DJANGO_SETTINGS_MODULE"):
    os.environ["DJANGO_SETTINGS_MODULE"] = "$PROJ.settings"

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'$PROJ'
copyright = u'$(date +%Y), $AUTHOR'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: 'text') to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = '${PROJ}doc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', '$PROJ.tex', u'$PROJ Documentation',
   u'$AUTHOR', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', '$PROJ', u'$PROJ Documentation',
     [u'$AUTHOR'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', '$PROJ', u'$PROJ Documentation',
   u'$AUTHOR', '$PROJ', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'
EOF

echo "generating doc/index.rst..."
cat >doc/index.rst <<EOF
.. include:: ../README.rst

Source Code
===========

.. automodule:: $PROJ.models
   :members:
.. automodule:: $PROJ.views
   :members:
.. automodule:: $PROJ.admin
   :members:
.. automodule:: $PROJ.urls
   :members:
.. automodule:: $PROJ.settings
   :members:
.. automodule:: $PROJ.middleware
   :members:
.. automodule:: $PROJ.management.commands.minify
   :members:
EOF

echo "generating doc/Makefile..."
cat >doc/Makefile <<EOF
# Makefile for Sphinx documentation
#

# You can set these variables from the command line.
SPHINXOPTS    =
SPHINXBUILD   = sphinx-build
PAPER         =
BUILDDIR      = _build

# Internal variables.
PAPEROPT_a4     = -D latex_paper_size=a4
PAPEROPT_letter = -D latex_paper_size=letter
ALLSPHINXOPTS   = -d \$(BUILDDIR)/doctrees \$(PAPEROPT_\$(PAPER)) \$(SPHINXOPTS) .

.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest

help:
	@echo "Please use \`make <target>' where <target> is one of"
	@echo "  html       to make standalone HTML files"
	@echo "  dirhtml    to make HTML files named index.html in directories"
	@echo "  singlehtml to make a single large HTML file"
	@echo "  pickle     to make pickle files"
	@echo "  json       to make JSON files"
	@echo "  htmlhelp   to make HTML files and a HTML help project"
	@echo "  qthelp     to make HTML files and a qthelp project"
	@echo "  devhelp    to make HTML files and a Devhelp project"
	@echo "  epub       to make an epub"
	@echo "  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
	@echo "  latexpdf   to make LaTeX files and run them through pdflatex"
	@echo "  text       to make text files"
	@echo "  man        to make manual pages"
	@echo "  changes    to make an overview of all changed/added/deprecated items"
	@echo "  linkcheck  to check all external links for integrity"
	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"

clean:
	-rm -rf \$(BUILDDIR)/*

html:
	\$(SPHINXBUILD) -b html \$(ALLSPHINXOPTS) \$(BUILDDIR)/html
	@echo
	@echo "Build finished. The HTML pages are in \$(BUILDDIR)/html."

dirhtml:
	\$(SPHINXBUILD) -b dirhtml \$(ALLSPHINXOPTS) \$(BUILDDIR)/dirhtml
	@echo
	@echo "Build finished. The HTML pages are in \$(BUILDDIR)/dirhtml."

singlehtml:
	\$(SPHINXBUILD) -b singlehtml \$(ALLSPHINXOPTS) \$(BUILDDIR)/singlehtml
	@echo
	@echo "Build finished. The HTML page is in \$(BUILDDIR)/singlehtml."

pickle:
	\$(SPHINXBUILD) -b pickle \$(ALLSPHINXOPTS) \$(BUILDDIR)/pickle
	@echo
	@echo "Build finished; now you can process the pickle files."

json:
	\$(SPHINXBUILD) -b json \$(ALLSPHINXOPTS) \$(BUILDDIR)/json
	@echo
	@echo "Build finished; now you can process the JSON files."

htmlhelp:
	\$(SPHINXBUILD) -b htmlhelp \$(ALLSPHINXOPTS) \$(BUILDDIR)/htmlhelp
	@echo
	@echo "Build finished; now you can run HTML Help Workshop with the" \\
	      ".hhp project file in \$(BUILDDIR)/htmlhelp."

qthelp:
	\$(SPHINXBUILD) -b qthelp \$(ALLSPHINXOPTS) \$(BUILDDIR)/qthelp
	@echo
	@echo "Build finished; now you can run "qcollectiongenerator" with the" \\
	      ".qhcp project file in \$(BUILDDIR)/qthelp, like this:"
	@echo "# qcollectiongenerator \$(BUILDDIR)/qthelp/artsigs.qhcp"
	@echo "To view the help file:"
	@echo "# assistant -collectionFile \$(BUILDDIR)/qthelp/artsigs.qhc"

devhelp:
	\$(SPHINXBUILD) -b devhelp \$(ALLSPHINXOPTS) \$(BUILDDIR)/devhelp
	@echo
	@echo "Build finished."
	@echo "To view the help file:"
	@echo "# mkdir -p \$\$HOME/.local/share/devhelp/artsigs"
	@echo "# ln -s \$(BUILDDIR)/devhelp \$\$HOME/.local/share/devhelp/artsigs"
	@echo "# devhelp"

epub:
	\$(SPHINXBUILD) -b epub \$(ALLSPHINXOPTS) \$(BUILDDIR)/epub
	@echo
	@echo "Build finished. The epub file is in \$(BUILDDIR)/epub."

latex:
	\$(SPHINXBUILD) -b latex \$(ALLSPHINXOPTS) \$(BUILDDIR)/latex
	@echo
	@echo "Build finished; the LaTeX files are in \$(BUILDDIR)/latex."
	@echo "Run \`make' in that directory to run these through (pdf)latex" \\
	      "(use \`make latexpdf' here to do that automatically)."

latexpdf:
	\$(SPHINXBUILD) -b latex \$(ALLSPHINXOPTS) \$(BUILDDIR)/latex
	@echo "Running LaTeX files through pdflatex..."
	make -C \$(BUILDDIR)/latex all-pdf
	@echo "pdflatex finished; the PDF files are in \$(BUILDDIR)/latex."

text:
	\$(SPHINXBUILD) -b text \$(ALLSPHINXOPTS) \$(BUILDDIR)/text
	@echo
	@echo "Build finished. The text files are in \$(BUILDDIR)/text."

man:
	\$(SPHINXBUILD) -b man \$(ALLSPHINXOPTS) \$(BUILDDIR)/man
	@echo
	@echo "Build finished. The manual pages are in \$(BUILDDIR)/man."

changes:
	\$(SPHINXBUILD) -b changes \$(ALLSPHINXOPTS) \$(BUILDDIR)/changes
	@echo
	@echo "The overview file is in \$(BUILDDIR)/changes."

linkcheck:
	\$(SPHINXBUILD) -b linkcheck \$(ALLSPHINXOPTS) \$(BUILDDIR)/linkcheck
	@echo
	@echo "Link check complete; look for any errors in the above output " \\
	      "or in \$(BUILDDIR)/linkcheck/output.txt."

doctest:
	\$(SPHINXBUILD) -b doctest \$(ALLSPHINXOPTS) \$(BUILDDIR)/doctest
	@echo "Testing of doctests in the sources finished, look at the " \\
	      "results in \$(BUILDDIR)/doctest/output.txt."
EOF

easy_install pip || exit 1
pip install sphinx || exit 1
pip install gunicorn || exit 1
pip install -e $(pwd) || exit 1

cp -aR ../lib/python*/site-packages/django/contrib/admin/media/admin $PROJ/media

$PROJ-dev syncdb || exit 1

make -C doc html

git init
git add .
git commit -m "django-bone initial import" \
           --author="Justine Tunney <jtunney@lobstertech.com>"

cat <<EOF

----------------------------------------------------------------------
                              All Done!

To get started you should run:

    cd $PROJ/$PROJ
    source ../bin/activate
    $PROJ-dev runserver

EOF
